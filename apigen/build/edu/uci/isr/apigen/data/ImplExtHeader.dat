package $$(PACKAGE_NAME);

import org.w3c.dom.*;

import edu.uci.isr.xarch.*;

import java.util.*;

/**
 * DOM-Based implementation of the $$(TYPE_INTERFACE_NAME) interface.
 *
 * @author Automatically generated by xArch apigen.
 */
public class $$(TYPE_IMPL_NAME) extends $$(BASE_TYPE_IMPL_NAME) implements
$$(TYPE_INTERFACE_NAME), $$(BASE_TYPE_INTERFACE_NAME), DOMBased{
	
	public static final String XSD_TYPE_NSURI = $$(PACKAGE_CONSTANTS_CLASS_NAME).NS_URI;
	public static final String XSD_TYPE_NAME = "$$(TYPE_NAME)";

$$(ATTRIBUTE_AND_ELEMENT_DECLARATIONS)
	
	private static SequenceOrder seqOrderAppend = new SequenceOrder(
		new QName[]{$$(SEQUENCE_ORDER_ITEMS)
		}
	);
	
	public $$(TYPE_IMPL_NAME)(Element elt){
		super(elt);
	}
	
	protected static SequenceOrder getSequenceOrder(){
		return new SequenceOrder($$(BASE_TYPE_IMPL_NAME).getSequenceOrder(), seqOrderAppend);
	}

	public IXArchElement cloneElement(int depth){
		synchronized(DOMUtils.getDOMLock(elt)){
			Document doc = elt.getOwnerDocument();
			if(depth == 0){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				$$(TYPE_IMPL_NAME) cloneImpl = new $$(TYPE_IMPL_NAME)(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
			else if(depth == 1){
				Element cloneElt = (Element)elt.cloneNode(false);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				$$(TYPE_IMPL_NAME) cloneImpl = new $$(TYPE_IMPL_NAME)(cloneElt);
				cloneImpl.setXArch(getXArch());
				
				NodeList nl = elt.getChildNodes();
				int size = nl.getLength();
				for(int i = 0; i < size; i++){
					Node n = nl.item(i);
					Node cloneNode = (Node)n.cloneNode(false);
					cloneNode = doc.importNode(cloneNode, true);
					cloneElt.appendChild(cloneNode);
				}
				return cloneImpl;
			}
			else /* depth = infinity */{
				Element cloneElt = (Element)elt.cloneNode(true);
				cloneElt = (Element)doc.importNode(cloneElt, true);
				$$(TYPE_IMPL_NAME) cloneImpl = new $$(TYPE_IMPL_NAME)(cloneElt);
				cloneImpl.setXArch(getXArch());
				return cloneImpl;
			}
		}
	}

	/**
	 * For internal use only.
	 */
	private static Object makeDerivedWrapper(Element elt, String baseTypeName){
		synchronized(DOMUtils.getDOMLock(elt)){
			QName typeName = XArchUtils.getXSIType(elt);
			if(typeName == null){
				return null;
			}
			else{
				if(!DOMUtils.hasXSIType(elt, "$$(SCHEMA_URI)", baseTypeName)){
					try{
						String packageTitle = XArchUtils.getPackageTitle(typeName.getNamespaceURI());
						String packageName = XArchUtils.getPackageName(packageTitle);
						String implName = XArchUtils.getImplName(packageName, typeName.getName());
						Class c = Class.forName(implName);
						java.lang.reflect.Constructor con = c.getConstructor(new Class[]{Element.class});
						Object o = con.newInstance(new Object[]{elt});
						return o;
					}
					catch(Exception e){
						//Lots of bad things could happen, but this
						//is OK, because this is best-effort anyway.
					}
				}
				return null;
			}
		}
	}

	public XArchTypeMetadata getTypeMetadata(){
		return $$(TYPE_INTERFACE_NAME).TYPE_METADATA;
	}

	public XArchInstanceMetadata getInstanceMetadata(){
		return new XArchInstanceMetadata(XArchUtils.getPackageTitle(elt.getNamespaceURI()));
	}
